name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      draft:
        description: "Create as draft release"
        required: false
        type: boolean
        default: false
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Cache X11 dependencies
        if: matrix.goos == 'linux'
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-x11-deps-${{ hashFiles('go.mod') }}
          restore-keys: |
            ${{ runner.os }}-x11-deps-

      - name: Install X11 dependencies
        if: matrix.goos == 'linux'
        run: |
          sudo apt update
          sudo apt install -y xvfb libx11-dev x11-utils libegl1-mesa-dev libgles2-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

      - name: Start Xvfb
        if: matrix.goos == 'linux'
        uses: ./.github/actions/setup-xvfb

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          OUTPUT_NAME="initiat"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT_NAME="initiat.exe"
          fi

          go build \
            -ldflags "-X github.com/InitiatDev/initiat-cli/cmd.version=${VERSION} -s -w" \
            -o "${OUTPUT_NAME}" \
            .

          ARCHIVE_NAME="initiat-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" "${OUTPUT_NAME}"
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "${OUTPUT_NAME}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            *.tar.gz
            *.zip
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: Generate checksums
        run: |
          sha256sum initiat-* > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            *.tar.gz
            *.zip
            checksums.txt
          body: |
            ## What's New in ${{ github.event.inputs.version }}

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ## Installation

            ### macOS
            ```bash
            # Intel
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/initiat-darwin-amd64.tar.gz | tar xz
            sudo mv initiat /usr/local/bin/

            # Apple Silicon
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/initiat-darwin-arm64.tar.gz | tar xz
            sudo mv initiat /usr/local/bin/
            ```

            ### Linux
            ```bash
            # AMD64
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/initiat-linux-amd64.tar.gz | tar xz
            sudo mv initiat /usr/local/bin/

            # ARM64
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/initiat-linux-arm64.tar.gz | tar xz
            sudo mv initiat /usr/local/bin/
            ```

            **Note for Linux users**: The clipboard functionality requires X11 development libraries. Install them with:
            ```bash
            # Desktop systems (most users):
            # Ubuntu/Debian
            sudo apt-get install libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

            # CentOS/RHEL/Fedora
            sudo yum install libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel
            # or for newer versions:
            sudo dnf install libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel

            # Arch Linux
            sudo pacman -S libx11 libxrandr libxinerama libxcursor libxi

            # Headless/CI systems (only if you don't have a display):
            # Ubuntu/Debian
            sudo apt-get install xvfb libx11-dev x11-utils libegl1-mesa-dev libgles2-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

            # CentOS/RHEL/Fedora
            sudo yum install xorg-x11-server-Xvfb libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel mesa-libEGL-devel mesa-libGLES-devel
            # or for newer versions:
            sudo dnf install xorg-x11-server-Xvfb libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel mesa-libEGL-devel mesa-libGLES-devel

            # Arch Linux
            sudo pacman -S xorg-server-xvfb libx11 libxrandr libxinerama libxcursor libxi mesa
            ```

            ### Windows
            Download the appropriate `.zip` file and extract it to your desired location.

            ### Verify Download (Optional)
            ```bash
            # Download checksums
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/checksums.txt

            # Verify your downloaded file
            sha256sum -c checksums.txt --ignore-missing
            ```

            ## Quick Start
            ```bash
            # Login to your Initiat account
            initiat auth login user@example.com

            # Register this device
            initiat device register "My Computer"

            # List available workspaces
            initiat workspace list
            ```

            ## Documentation
            - [Full Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
            - [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
            - [Development Guide](https://github.com/${{ github.repository }}/blob/main/docs/DEV_BUILD.md)

            ## Homebrew (macOS)
            ```bash
            brew tap InitiatDev/initiat
            brew install initiat
            ```
