# Initiat CLI Documentation
# Unified documentation structure with flexible content types

metadata:
  version: "0.5.0"
  last_updated: "2025-10-08T19:00:00Z"
  author: "Initiat Team"
  description: "Complete CLI documentation for Initiat"

sections:
  commands:
    id: "commands"
    title: "CLI Commands"
    type: "commands"
    description: "Complete reference for all CLI commands"
    published: true
    metadata:
      order: 1
      icon: "terminal"
    
  guides:
    id: "guides" 
    title: "Guides & Tutorials"
    type: "guides"
    description: "Step-by-step guides and workflows"
    published: true
    metadata:
      order: 2
      icon: "book-open"
      
  reference:
    id: "reference"
    title: "Reference"
    type: "reference" 
    description: "Quick reference and patterns"
    published: true
    metadata:
      order: 3
      icon: "document-text"

commands:
  auth.login:
    id: "auth.login"
    name: "login"
    category: "auth"
    description: "Authenticate with your Initiat account credentials"
    usage: "initiat auth login [--email EMAIL]"
    arguments: []
    options:
      - name: "email"
        short: "e"
        description: "Email address for login (optional, will prompt if not provided)"
        required: false
    examples:
      - description: "Login with email prompt"
        command: "initiat auth login"
      - description: "Login with email specified"
        command: "initiat auth login --email user@example.com"
        output: |
          ‚úÖ Login successful! Registration token expires in 15 minutes.
          üí° Next: Register this device with 'initiat device register <name>'
    workflow_steps:
      - "Prompts for your password (hidden input)"
      - "Authenticates with the Initiat API"
      - "Stores registration token securely in OS keychain"
      - "Displays next steps for device registration"
    metadata:
      difficulty: "beginner"
      estimated_time: "1 minute"

  device.register:
    id: "device.register"
    name: "register"
    category: "device"
    description: "Register this device with Initiat to enable secure secret access"
    usage: "initiat device register <device-name>"
    arguments:
      - name: "device-name"
        description: "Human-readable name for this device"
        required: true
    options: []
    examples:
      - description: "Register with descriptive name"
        command: 'initiat device register "my-laptop"'
      - description: "Register work device"
        command: 'initiat device register "work-macbook"'
    workflow_steps:
      - "Generates Ed25519 signing keypair"
      - "Generates X25519 encryption keypair"
      - "Registers device with server using authentication token"
      - "Stores keys securely in system keychain"
      - "Clears temporary authentication token"
    output: |
      üîë Registering device: my-laptop
      üîë Generating Ed25519 signing keypair...
      üîí Generating X25519 encryption keypair...
      üì° Registering device with server...
      üîê Storing keys securely in system keychain...
      ‚úÖ Device registered successfully!

      Device ID: dev_abc123
      Device Name: my-laptop
      Created: 2024-01-15T10:30:00Z

      üîê Keys stored securely in system keychain
      üí° Next: Initialize project keys with 'initiat project list'
    metadata:
      difficulty: "beginner"
      estimated_time: "2 minutes"

  device.unregister:
    id: "device.unregister"
    name: "unregister"
    category: "device"
    description: "Clear local device credentials from the system keychain"
    usage: "initiat device unregister"
    arguments: []
    options: []
    examples:
      - description: "Clear device credentials"
        command: "initiat device unregister"
    workflow_steps:
      - "Removes all device credentials stored locally"
      - "Use when registering a fresh device or cleaning up after server deletion"
    output: |
      üîê Clearing local device credentials...
      ‚úÖ Device credentials cleared successfully!

      üí° You can now register a new device with 'initiat device register <name>'
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  device.clear_token:
    id: "device.clear_token"
    name: "clear-token"
    category: "device"
    description: "Clear stored authentication token"
    usage: "initiat device clear-token"
    arguments: []
    options: []
    examples:
      - description: "Clear authentication token"
        command: "initiat device clear-token"
    when_to_use:
      - "Getting 'Invalid or expired registration token' errors"
      - "Need to re-authenticate"
    output: |
      üîê Clearing authentication token...
      ‚úÖ Authentication token cleared successfully!
      üí° You will need to authenticate again for device registration
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  device.approvals:
    id: "device.approvals"
    name: "approvals"
    category: "device"
    description: "List all pending device approvals for projects where you are an admin"
    usage: "initiat device approvals"
    arguments: []
    options: []
    examples:
      - description: "List pending approvals"
        command: "initiat device approvals"
    output: |
      üìã Pending Device Approvals (2)

      ID  User           Device         Project      Requested
      1   John Doe       work-laptop    acme/prod      Jan 15 10:30
      2   Jane Smith     dev-machine    acme/staging   Jan 15 11:45

      üí° Use 'initiat device approve --all' to approve all pending devices
      üí° Use 'initiat device approve --id <id>' to approve a specific device
    metadata:
      difficulty: "intermediate"
      estimated_time: "1 minute"

  device.approve:
    id: "device.approve"
    name: "approve"
    category: "device"
    description: "Approve device access to projects"
    usage: "initiat device approve [--all] [--id ID]"
    arguments: []
    options:
      - name: "all"
        description: "Approve all pending devices"
        required: false
      - name: "id"
        description: "Approve specific device by approval ID"
        required: false
    examples:
      - description: "Approve all pending devices"
        command: "initiat device approve --all"
      - description: "Approve specific device"
        command: "initiat device approve --id 123"
    output: |
      üîê Approving all pending devices...

      Found 2 pending approvals:
        ‚Ä¢ work-laptop (acme-corp/production) - John Doe
        ‚Ä¢ dev-machine (acme-corp/staging) - Jane Smith

      ‚úÖ Approved 2 devices successfully!
         All approved devices can now access their respective project secrets
    metadata:
      difficulty: "intermediate"
      estimated_time: "1 minute"

  device.reject:
    id: "device.reject"
    name: "reject"
    category: "device"
    description: "Reject device access to projects"
    usage: "initiat device reject [--all] [--id ID]"
    arguments: []
    options:
      - name: "all"
        description: "Reject all pending devices"
        required: false
      - name: "id"
        description: "Reject specific device by approval ID"
        required: false
    examples:
      - description: "Reject all pending devices"
        command: "initiat device reject --all"
      - description: "Reject specific device"
        command: "initiat device reject --id 123"
    output: |
      ‚ùå Rejecting all pending devices...

      Found 2 pending approvals to reject
      ‚ùå Rejected 2 devices
         Users will need to request approval again
    metadata:
      difficulty: "intermediate"
      estimated_time: "1 minute"

  device.approval:
    id: "device.approval"
    name: "approval"
    category: "device"
    description: "Show detailed information about a specific device approval"
    usage: "initiat device approval --id ID"
    arguments: []
    options:
      - name: "id"
        description: "Device approval ID to show"
        required: true
    examples:
      - description: "Show approval details"
        command: "initiat device approval --id 123"
    output: |
      üìã Device Approval Details

      User: John Doe (john.doe@example.com)
      Device: work-laptop (ID: 456)
      Project: Acme Corp / Production (acme-corp/production)
      Requested: Jan 15 10:30:00Z
      Status: pending

      üîë Device Public Keys:
        Ed25519: abc123def456... (for signing)
        X25519: def456ghi789... (for encryption)
    metadata:
      difficulty: "intermediate"
      estimated_time: "1 minute"

  project.list:
    id: "project.list"
    name: "list"
    category: "project"
    description: "List all projects and their key initialization status"
    usage: "initiat project list"
    arguments: []
    options: []
    examples:
      - description: "List all projects"
        command: "initiat project list"
    workflow_steps:
      - "Fetches all projects accessible to your account"
      - "Shows key initialization status"
      - "Displays your role in each project"
    output: |
      üîç Fetching projects...

      Name           Composite Slug      Key Initialized  Role
      Production     acme-corp/prod      ‚úÖ Yes          admin
      Staging        acme-corp/staging   ‚ùå No           member
      Development    acme-corp/dev       ‚ùå No           member

      üí° Initialize keys for projects marked "No" using:
         initiat project init <org-slug/project-slug>
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  project.init:
    id: "project.init"
    name: "init"
    category: "project"
    description: "Initialize a new project key for secure secret storage"
    usage: "initiat project init [project-path]"
    arguments:
      - name: "project-path"
        description: "Full project path (org/project) or use flags"
        required: false
    options:
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "Using positional argument"
        command: "initiat project init acme-corp/production"
      - description: "Using flags"
        command: "initiat project init --org acme-corp --project production"
      - description: "Using short flags"
        command: "initiat project init --org acme-corp -p production"
      - description: "Project only (uses default org)"
        command: "initiat project init --project production"
    workflow_steps:
      - "Generates secure 256-bit project key"
      - "Encrypts project key with your device's X25519 key"
      - "Uploads encrypted key to server"
      - "Enables secret storage and retrieval for this project"
    output: |
      üîê Initializing project key for "acme-corp/production"...
      ‚ö° Generating secure 256-bit project key...
      üîí Encrypting project key with your device's X25519 key...
      üì° Uploading encrypted key to server...
      ‚úÖ Project key initialized successfully!
      üéØ You can now store and retrieve secrets in this project.

      Next steps:
        ‚Ä¢ Add secrets: initiat secret set API_KEY --value your-secret
        ‚Ä¢ List secrets: initiat secret list
        ‚Ä¢ Invite devices: initiat project invite-device
    metadata:
      difficulty: "beginner"
      estimated_time: "1 minute"

  project.setup:
    id: "project.setup"
    name: "setup"
    category: "project"
    description: "Set up a new project by creating a .initiat file and initializing the project"
    usage: "initiat project setup"
    arguments: []
    options: []
    examples:
      - description: "Set up a new project"
        command: "initiat project setup"
    workflow_steps:
      - "Creates a .initiat file in the current directory"
      - "Prompts for organization (uses default if set)"
      - "Asks for project name (defaults to current folder name)"
      - "Sets the values in the .initiat file"
      - "Checks if project exists remotely"
      - "Initializes project key if project exists"
      - "Provides guidance if project doesn't exist"
    output: |
      üöÄ Setting up a new project...

      üè¢ Organization (default: my-company): 
      üì¶ Project name (default: my-project): 
      ‚úÖ Created .initiat file with org: my-company, project: my-project
      üîê Project key initialized successfully!

      üéâ Project setup complete!
      üìç Project: my-company/my-project
      üìÅ Local config: .initiat file created

      Next steps:
        ‚Ä¢ Add secrets: initiat secret set API_KEY --value your-secret
        ‚Ä¢ List secrets: initiat secret list
        ‚Ä¢ Invite team members: initiat project invite-device
    metadata:
      difficulty: "beginner"
      estimated_time: "2 minutes"

  secret.set:
    id: "secret.set"
    name: "set"
    category: "secret"
    description: "Set a secret value in the specified project"
    usage: "initiat secret set <secret-key> --value VALUE [options]"
    arguments:
      - name: "secret-key"
        description: "The key/name for the secret"
        required: true
    options:
      - name: "value"
        short: "v"
        description: "Secret value"
        required: true
      - name: "description"
        short: "d"
        description: "Optional description for the secret"
        required: false
      - name: "force"
        short: "f"
        description: "Overwrite existing secret without confirmation"
        required: false
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "Set secret with full project path"
        command: 'initiat secret set API_KEY --value "sk-1234567890abcdef" --project-path acme-corp/production'
      - description: "Set secret with separate org/project"
        command: 'initiat secret set DB_PASSWORD --org acme-corp --project production --value "super-secret-pass" --description "Production database password"'
      - description: "Set secret with short flags"
        command: 'initiat secret set API_KEY -P acme-corp/production -v "sk-1234567890abcdef"'
      - description: "Force overwrite existing secret"
        command: 'initiat secret set API_KEY -p production -v "new-value" --force'
    workflow_steps:
      - "Validates secret key and value"
      - "Retrieves project key from server"
      - "Encrypts secret value client-side"
      - "Uploads encrypted secret to server"
      - "Shows confirmation with metadata"
    output: |
      üîê Setting secret 'API_KEY' in project acme-corp/production...
      üîí Encrypting secret value...
      üì° Uploading encrypted secret to server...
      ‚úÖ Secret 'API_KEY' set successfully!
         Version: 1
         Updated: 2024-01-15T10:30:00Z
         Created by: my-laptop
    metadata:
      difficulty: "beginner"
      estimated_time: "1 minute"

  secret.get:
    id: "secret.get"
    name: "get"
    category: "secret"
    description: "Get and decrypt a secret value from the specified project"
    usage: "initiat secret get <secret-key> [options]"
    arguments:
      - name: "secret-key"
        description: "The key/name for the secret"
        required: true
    options:
      - name: "copy"
        short: "c"
        description: "Copy value to clipboard instead of printing"
        required: false
      - name: "copy-kv"
        description: "Copy KEY=VALUE format to clipboard"
        required: false
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "Get secret with full project path"
        command: "initiat secret get API_KEY --project-path acme-corp/production"
      - description: "Get secret with short flags"
        command: "initiat secret get API_KEY -P acme-corp/production"
      - description: "Get secret and copy value to clipboard"
        command: "initiat secret get API_KEY -p production --copy"
      - description: "Get secret and copy KEY=VALUE format to clipboard"
        command: "initiat secret get API_KEY -p production --copy-kv"
    workflow_steps:
      - "Retrieves encrypted secret from server"
      - "Gets project key and decrypts it"
      - "Decrypts secret value client-side"
      - "Outputs JSON with secret metadata (default)"
      - "Optionally copies value to clipboard (--copy)"
      - "Optionally copies KEY=VALUE format to clipboard (--copy-kv)"
    output: |
      üîç Getting secret 'API_KEY' from project acme-corp/production...
      üîì Decrypting secret value...
      {
        "key": "API_KEY",
        "value": "sk-1234567890abcdef",
        "version": 1,
        "project_id": "ws_abc123",
        "updated_at": "2024-01-15T10:30:00Z",
        "created_by_device": "my-laptop"
      }
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  secret.list:
    id: "secret.list"
    name: "list"
    category: "secret"
    description: "List all secrets in the specified project (metadata only, no values)"
    usage: "initiat secret list [options]"
    arguments: []
    options:
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "List secrets with full project path"
        command: "initiat secret list --project-path acme-corp/production"
      - description: "List secrets with short flags"
        command: "initiat secret list -P acme-corp/production"
      - description: "List secrets with project only"
        command: "initiat secret list --project production"
    workflow_steps:
      - "Fetches all secrets for the project"
      - "Displays metadata in table format"
      - "Shows key, encrypted status, and version"
      - "Never exposes actual secret values"
    output: |
      üîç Listing secrets in project acme-corp/production...

      Key        Value        Version
      API_KEY    [encrypted]  1
      DB_PASS    [encrypted]  1
      JWT_SECRET [encrypted]  2
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  secret.delete:
    id: "secret.delete"
    name: "delete"
    category: "secret"
    description: "Delete a secret from the specified project"
    usage: "initiat secret delete <secret-key> [options]"
    arguments:
      - name: "secret-key"
        description: "The key/name for the secret"
        required: true
    options:
      - name: "force"
        short: "f"
        description: "Skip confirmation prompt"
        required: false
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "Delete secret with confirmation"
        command: "initiat secret delete API_KEY --project-path acme-corp/production"
      - description: "Delete secret with short flags"
        command: "initiat secret delete API_KEY -P acme-corp/production"
      - description: "Force delete without confirmation"
        command: "initiat secret delete OLD_API_KEY --project production --force"
    workflow_steps:
      - "Prompts for confirmation (unless --force is used)"
      - "Deletes secret from server"
      - "Shows confirmation message"
    output: |
      ‚ö†Ô∏è  Are you sure you want to delete secret 'API_KEY' from project acme-corp/production? (y/N): y
      üóëÔ∏è  Deleting secret 'API_KEY' from project acme-corp/production...
      ‚úÖ Secret 'API_KEY' deleted successfully!
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  secret.export:
    id: "secret.export"
    name: "export"
    category: "secret"
    description: "Export a secret value to a file"
    usage: "initiat secret export <secret-key> --output FILE [options]"
    arguments:
      - name: "secret-key"
        description: "The key/name for the secret"
        required: true
    options:
      - name: "output"
        description: "Output file path"
        required: true
      - name: "force"
        short: "f"
        description: "Overwrite existing key without confirmation"
        required: false
      - name: "project-path"
        short: "P"
        description: "Full project path (org/project) or alias"
        required: false
      - name: "project"
        short: "p"
        description: "Project name (uses default org or --org)"
        required: false
      - name: "org"
        description: "Organization slug (used with --project)"
        required: false
    examples:
      - description: "Export secret to a file"
        command: "initiat secret export API_KEY --output .env --project-path acme-corp/production"
      - description: "Export to deep directory (creates folders)"
        command: "initiat secret export API_KEY --output config/secrets.env -P acme-corp/production"
      - description: "Export with force override"
        command: "initiat secret export API_KEY --output secrets.txt --force"
    workflow_steps:
      - "Retrieves and decrypts secret from server"
      - "Creates output directory if it doesn't exist"
      - "Checks for existing key in file (prompts if found)"
      - "Writes secret in KEY=VALUE format"
      - "Detects git repository and suggests .gitignore"
    output: |
      üîç Getting secret 'API_KEY' from project acme-corp/production...
      üîì Decrypting secret value...
      ‚ö†Ô∏è  File 'secrets.env' is not in .gitignore. Add it? (y/N): y
      ‚úÖ Added 'secrets.env' to .gitignore
      ‚úÖ Secret 'API_KEY' exported to secrets.env
    metadata:
      difficulty: "beginner"
      estimated_time: "1 minute"

  config.set:
    id: "config.set"
    name: "set"
    category: "config"
    description: "Set a configuration value using dot notation for nested keys"
    usage: "initiat config set <key> <value>"
    arguments:
      - name: "key"
        description: "Configuration key to set"
        required: true
      - name: "value"
        description: "Value to set"
        required: true
    options: []
    examples:
      - description: "Set API URL"
        command: 'initiat config set api.url "https://www.initiat.dev"'
      - description: "Set API timeout"
        command: 'initiat config set api.timeout "60s"'
      - description: "Set default organization"
        command: 'initiat config set org "my-company"'
      - description: "Set default project"
        command: 'initiat config set project "production"'
      - description: "Set service name"
        command: 'initiat config set service "my-custom-service"'
    output: |
      ‚úÖ Set api.url = https://www.initiat.dev
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.get:
    id: "config.get"
    name: "get"
    category: "config"
    description: "Get a configuration value using dot notation for nested keys"
    usage: "initiat config get <key>"
    arguments:
      - name: "key"
        description: "Configuration key to get"
        required: true
    options: []
    examples:
      - description: "Get API URL"
        command: "initiat config get api.url"
      - description: "Get default organization"
        command: "initiat config get org"
      - description: "Get default project"
        command: "initiat config get project"
    output: |
      api.url: https://www.initiat.dev
      org: my-company
      project: production
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.show:
    id: "config.show"
    name: "show"
    category: "config"
    description: "Show all current configuration values"
    usage: "initiat config show"
    arguments: []
    options: []
    examples:
      - description: "Show all configuration"
        command: "initiat config show"
    output: |
      Current configuration:
        api.url: https://www.initiat.dev
        api.timeout: 30s
        service: initiat-cli
        org: my-company
        project: production

      Project aliases:
        prod: acme-corp/production
        staging: acme-corp/staging
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.clear:
    id: "config.clear"
    name: "clear"
    category: "config"
    description: "Clear a configuration value using dot notation for nested keys"
    usage: "initiat config clear <key>"
    arguments:
      - name: "key"
        description: "Configuration key to clear"
        required: true
    options:
      - name: "all"
        description: "Clear all configuration values (with confirmation)"
        required: false
    examples:
      - description: "Clear default organization"
        command: "initiat config clear org"
      - description: "Clear API timeout"
        command: "initiat config clear api.timeout"
      - description: "Clear all configuration"
        command: "initiat config clear --all"
    output: |
      ‚úÖ Cleared org
      ‚úÖ Cleared api.timeout
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.reset:
    id: "config.reset"
    name: "reset"
    category: "config"
    description: "Reset all configuration values to their default settings"
    usage: "initiat config reset"
    arguments: []
    options: []
    examples:
      - description: "Reset all configuration to defaults"
        command: "initiat config reset"
    workflow_steps:
      - "Prompts for confirmation to ensure user wants to reset"
      - "Resets all API settings to defaults"
      - "Clears project defaults (org and project)"
      - "Removes all project aliases"
      - "Resets service name to default"
    output: |
      ‚ö†Ô∏è  Are you sure you want to reset all configuration to defaults? (y/N): y
      ‚úÖ Configuration reset to defaults
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.alias.set:
    id: "config.alias.set"
    name: "set"
    category: "config"
    description: "Set a project alias to a full project path"
    usage: "initiat config alias set <alias> <project-path>"
    arguments:
      - name: "alias"
        description: "Alias name"
        required: true
      - name: "project-path"
        description: "Full project path in format 'org/project'"
        required: true
    options: []
    examples:
      - description: "Set production alias"
        command: 'initiat config alias set prod "acme-corp/production"'
      - description: "Set staging alias"
        command: 'initiat config alias set staging "acme-corp/staging"'
      - description: "Set development alias"
        command: 'initiat config alias set dev "acme-corp/development"'
    output: |
      ‚úÖ Set alias 'prod' = acme-corp/production
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.alias.get:
    id: "config.alias.get"
    name: "get"
    category: "config"
    description: "Get the project path for a specific alias"
    usage: "initiat config alias get <alias>"
    arguments:
      - name: "alias"
        description: "Alias name to get"
        required: true
    options: []
    examples:
      - description: "Get production alias"
        command: "initiat config alias get prod"
    output: |
      prod: acme-corp/production
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.alias.list:
    id: "config.alias.list"
    name: "list"
    category: "config"
    description: "List all configured project aliases"
    usage: "initiat config alias list"
    arguments: []
    options: []
    examples:
      - description: "List all aliases"
        command: "initiat config alias list"
    output: |
      Project aliases:
        prod: acme-corp/production
        staging: acme-corp/staging
        dev: acme-corp/development
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  config.alias.remove:
    id: "config.alias.remove"
    name: "remove"
    category: "config"
    description: "Remove a project alias"
    usage: "initiat config alias remove <alias>"
    arguments:
      - name: "alias"
        description: "Alias name to remove"
        required: true
    options: []
    examples:
      - description: "Remove production alias"
        command: "initiat config alias remove prod"
    output: |
      ‚úÖ Removed alias 'prod'
    metadata:
      difficulty: "beginner"
      estimated_time: "30 seconds"

  version.version:
    id: "version.version"
    name: "version"
    category: "version"
    description: "Print the CLI version information"
    usage: "initiat version"
    arguments: []
    options: []
    examples:
      - description: "Show version"
        command: "initiat version"
    output: |
      initiat-cli v1.0.0
    metadata:
      difficulty: "beginner"
      estimated_time: "10 seconds"

guides:
  first_time_setup:
    id: "first_time_setup"
    title: "First Time Setup"
    type: "scenario"
    description: "Complete setup for new users getting started with Initiat"
    difficulty: "beginner"
    estimated_time: "5 minutes"
    prerequisites: []
    steps:
      - step: 1
        title: "Authenticate"
        command: "initiat auth login"
        description: "Authenticate with your Initiat account"
        explanation: "This creates a temporary authentication token that expires in 15 minutes"
      - step: 2
        title: "Register Device"
        command: 'initiat device register "my-laptop"'
        description: "Register your device for secure access"
        explanation: "This generates encryption keys and registers your device with the server"
      - step: 3
        title: "List Projects"
        command: "initiat project list"
        description: "See available projects"
        explanation: "Lists all projects you have access to and their key initialization status"
      - step: 4
        title: "Initialize Project"
        command: "initiat project init acme-corp/production"
        description: "Initialize project keys"
        explanation: "Generates and encrypts project keys to enable secret storage"
      - step: 5
        title: "Store First Secret"
        command: 'initiat secret set API_KEY --value "your-secret-key"'
        description: "Store your first secret"
        explanation: "Encrypts and stores a secret in the project"
    success_criteria:
      - "You can now securely store and retrieve secrets in your project"
    next_steps:
      - "Invite team members to projects"
      - "Set up additional projects for different environments"
      - "Configure CI/CD integration"
    metadata:
      tags: ["getting-started", "authentication", "device-setup"]
      order: 1

  team_onboarding:
    id: "team_onboarding"
    title: "Team Onboarding"
    type: "workflow"
    description: "Add team members to projects and approve their devices"
    difficulty: "intermediate"
    estimated_time: "10 minutes"
    prerequisites: ["admin_access"]
    steps:
      - step: 1
        title: "Review Pending Approvals"
        command: "initiat device approvals"
        description: "Check for pending device approvals"
        explanation: "Shows all devices waiting for approval to access projects"
      - step: 2
        title: "Review Device Details"
        command: "initiat device approval --id 123"
        description: "Review specific device information"
        explanation: "Shows device information and public keys for verification"
      - step: 3
        title: "Approve Devices"
        command: "initiat device approve --all"
        description: "Approve all pending devices"
        explanation: "Grants access to all approved devices for their respective projects"
      - step: 4
        title: "Verify Access"
        command: "initiat project list"
        description: "Verify team members can access projects"
        explanation: "Confirm that team members can now access project secrets"
    success_criteria:
      - "All team devices are approved"
      - "Team members can access project secrets"
      - "No pending approvals remain"
    next_steps:
      - "Train team members on secret management"
      - "Set up environment-specific projects"
      - "Configure automated secret rotation"
    metadata:
      tags: ["team-management", "device-approval", "collaboration"]
      order: 2

  environment_setup:
    id: "environment_setup"
    title: "Multi-Environment Setup"
    type: "workflow"
    description: "Set up projects for different environments (dev, staging, prod)"
    difficulty: "intermediate"
    estimated_time: "20 minutes"
    prerequisites: ["admin_access", "multiple_environments"]
    steps:
      - step: 1
        title: "List Available Projects"
        command: "initiat project list"
        description: "See current project structure"
        explanation: "Review existing projects and their initialization status"
      - step: 2
        title: "Initialize Production"
        command: "initiat project init acme-corp/production"
        description: "Initialize production project keys"
        explanation: "Set up keys for production environment"
      - step: 3
        title: "Initialize Staging"
        command: "initiat project init acme-corp/staging"
        description: "Initialize staging project keys"
        explanation: "Set up keys for staging environment"
      - step: 4
        title: "Initialize Development"
        command: "initiat project init acme-corp/development"
        description: "Initialize development project keys"
        explanation: "Set up keys for development environment"
      - step: 5
        title: "Set Environment Secrets"
        command: |
          initiat secret set API_KEY --value "prod-key" --project-path acme-corp/production
          initiat secret set API_KEY --value "staging-key" --project-path acme-corp/staging
          initiat secret set API_KEY --value "dev-key" --project-path acme-corp/development
        description: "Set environment-specific secrets"
        explanation: "Store different secrets for each environment"
      - step: 6
        title: "Verify Setup"
        command: "initiat secret list --project-path acme-corp/production"
        description: "Verify secrets are properly stored"
        explanation: "Confirm that environment-specific secrets are stored correctly"
    success_criteria:
      - "All environments have initialized project keys"
      - "Environment-specific secrets are stored"
      - "Team members can access appropriate environments"
    next_steps:
      - "Configure CI/CD pipelines for each environment"
      - "Set up automated secret rotation"
      - "Train team on environment-specific workflows"
    metadata:
      tags: ["environments", "project-setup", "devops"]
      order: 3

  secret_rotation:
    id: "secret_rotation"
    title: "Secret Rotation"
    type: "workflow"
    description: "Safely rotate secrets across environments"
    difficulty: "intermediate"
    estimated_time: "30 minutes"
    prerequisites: ["access_to_all_environments", "new_secret_values_ready"]
    steps:
      - step: 1
        title: "Audit Current Secrets"
        command: "initiat secret list"
        description: "Review current secrets and versions"
        explanation: "Document existing secrets before rotation"
      - step: 2
        title: "Backup Current Secrets"
        command: "initiat secret get <secret-key>"
        description: "Retrieve current secret values for backup"
        explanation: "Save current values in case rollback is needed"
      - step: 3
        title: "Update Development"
        command: 'initiat secret set API_KEY --value "new-dev-key" --project-path acme-corp/development'
        description: "Update secret in development environment"
        explanation: "Test new secret in development first"
      - step: 4
        title: "Test in Development"
        command: "initiat secret get API_KEY --project-path acme-corp/development"
        description: "Verify new secret works in development"
        explanation: "Confirm new secret is working correctly"
      - step: 5
        title: "Update Staging"
        command: 'initiat secret set API_KEY --value "new-staging-key" --project-path acme-corp/staging'
        description: "Update secret in staging environment"
        explanation: "Deploy to staging for further testing"
      - step: 6
        title: "Test in Staging"
        command: "initiat secret get API_KEY --project-path acme-corp/staging"
        description: "Verify new secret works in staging"
        explanation: "Confirm staging environment is working"
      - step: 7
        title: "Update Production"
        command: 'initiat secret set API_KEY --value "new-prod-key" --project-path acme-corp/production'
        description: "Update secret in production environment"
        explanation: "Deploy to production after successful testing"
      - step: 8
        title: "Verify Production"
        command: "initiat secret get API_KEY --project-path acme-corp/production"
        description: "Verify new secret works in production"
        explanation: "Confirm production environment is working"
    success_criteria:
      - "All environments have updated secrets"
      - "New secrets are working correctly"
      - "Old secrets are no longer accessible"
    next_steps:
      - "Update CI/CD pipelines with new secrets"
      - "Notify team of secret rotation"
      - "Document rotation process for future"
    metadata:
      tags: ["security", "secret-rotation", "production"]
      order: 4

  configuration_management:
    id: "configuration_management"
    title: "Configuration Management"
    type: "guide"
    description: "Complete guide to managing CLI configuration, project defaults, and aliases"
    difficulty: "beginner"
    estimated_time: "10 minutes"
    prerequisites: ["basic_understanding_of_initiat_cli"]
    steps:
      - step: 1
        title: "View Current Configuration"
        command: "initiat config show"
        description: "See all current configuration settings"
        explanation: "Review your current configuration to understand what's set"
      - step: 2
        title: "Set Default Organization"
        command: 'initiat config set org "my-company"'
        description: "Set your default organization"
        explanation: "This allows you to use project names without specifying the org"
      - step: 3
        title: "Set Default Project"
        command: 'initiat config set project "production"'
        description: "Set your default project"
        explanation: "This allows you to run commands without specifying the project"
      - step: 4
        title: "Create Project Aliases"
        command: |
          initiat config alias set prod "my-company/production"
          initiat config alias set staging "my-company/staging"
          initiat config alias set dev "my-company/development"
        description: "Create shortcuts for frequently used projects"
        explanation: "Aliases make it easier to reference projects with short names"
      - step: 5
        title: "Configure API Settings"
        command: |
          initiat config set api.url "https://api.initiat.dev"
          initiat config set api.timeout "60s"
        description: "Configure API connection settings"
        explanation: "Set custom API URL and timeout for your environment"
      - step: 6
        title: "Verify Configuration"
        command: "initiat config show"
        description: "Confirm all settings are correct"
        explanation: "Review your configuration to ensure everything is set up properly"
    success_criteria:
      - "Default organization and project are set"
      - "Project aliases are configured"
      - "API settings are configured for your environment"
    next_steps:
      - "Use aliases in commands for faster workflow"
      - "Set up team configuration standards"
      - "Document configuration for team members"
    metadata:
      tags: ["configuration", "setup", "productivity"]
      order: 5

  local_configuration:
    id: "local_configuration"
    title: "Local Configuration with .initiat Files"
    type: "guide"
    description: "Use .initiat files for project-specific configuration overrides"
    difficulty: "beginner"
    estimated_time: "5 minutes"
    prerequisites: ["basic_understanding_of_initiat_cli"]
    steps:
      - step: 1
        title: "Navigate to Project Directory"
        command: "cd /path/to/your/project"
        description: "Go to your project directory"
        explanation: "Local configuration files are read from the current directory"
      - step: 2
        title: "Create .initiat File"
        command: "initiat project setup"
        description: "Use the guided setup to create .initiat file"
        explanation: "This creates a .initiat file with your project context"
      - step: 3
        title: "Verify Local Configuration"
        command: "cat .initiat"
        description: "Check the contents of your .initiat file"
        explanation: "The file should contain org and project settings"
      - step: 4
        title: "Test Local Configuration"
        command: "initiat secret list"
        description: "Test that local configuration is working"
        explanation: "Commands should now use the local project context automatically"
      - step: 5
        title: "Override with Flags (Optional)"
        command: "initiat secret list --project-path other-org/other-project"
        description: "Override local config with command flags when needed"
        explanation: "Command-line flags always take precedence over local configuration"
    success_criteria:
      - ".initiat file is created in project directory"
      - "Commands use local project context automatically"
      - "Can override local config with command flags when needed"
    next_steps:
      - "Share .initiat files with team members"
      - "Add .initiat to version control (if appropriate)"
      - "Set up local config for multiple projects"
    metadata:
      tags: ["local-config", "project-setup", "productivity"]
      order: 6

  troubleshooting:
    id: "troubleshooting"
    title: "Troubleshooting"
    type: "guide"
    description: "Systematic approach to resolving common issues"
    difficulty: "beginner"
    estimated_time: "15 minutes"
    prerequisites: ["basic_understanding_of_initiat_cli"]
    steps:
      - step: 1
        title: "Check Authentication"
        command: "initiat auth login"
        description: "Verify authentication is working"
        explanation: "Ensure you can authenticate with your account"
      - step: 2
        title: "Clear Expired Tokens"
        command: "initiat device clear-token"
        description: "Clear any expired authentication tokens"
        explanation: "Remove any stale authentication data"
      - step: 3
        title: "Re-authenticate"
        command: "initiat auth login"
        description: "Get fresh authentication token"
        explanation: "Obtain a new authentication token"
      - step: 4
        title: "Check Device Status"
        command: "initiat device approvals"
        description: "Verify device is approved for project access"
        explanation: "Confirm your device has proper access"
      - step: 5
        title: "Re-register Device"
        command: 'initiat device register "my-device"'
        description: "Re-register device if needed"
        explanation: "Re-register your device if there are issues"
      - step: 6
        title: "Test Project Access"
        command: "initiat project list"
        description: "Verify project access is working"
        explanation: "Confirm you can access your projects"
      - step: 7
        title: "Test Secret Access"
        command: "initiat secret list"
        description: "Test secret retrieval functionality"
        explanation: "Verify you can access secrets in your projects"
    success_criteria:
      - "Authentication is working"
      - "Device is properly registered and approved"
      - "Can access projects and secrets"
    next_steps:
      - "Contact support if issues persist"
      - "Document the issue for future reference"
      - "Update team on resolution"
    metadata:
      tags: ["troubleshooting", "debugging", "support"]
      order: 7

reference:
  global_options:
    id: "global_options"
    title: "Global Options"
    type: "reference"
    description: "Global options that apply to all CLI commands"
    content:
      options:
        - name: "config"
          description: "Path to configuration file"
          default: "~/.initiat/config.yaml"
          environment_variable: null
        - name: "api-url"
          description: "API base URL"
          default: "https://www.initiat.dev"
          environment_variable: "INITIAT_API_BASE_URL"
        - name: "service-name"
          description: "Keyring service name"
          default: "initiat-cli"
          environment_variable: null
        - name: "project-path"
          short: "P"
          description: "Full project path (org/project) or alias"
          environment_variable: null
        - name: "project"
          short: "p"
          description: "Project name (uses default org or --org)"
          environment_variable: null
        - name: "org"
          description: "Organization slug (used with --project)"
          environment_variable: null
    metadata:
      order: 1

  project_context:
    id: "project_context"
    title: "Project Context Resolution"
    type: "reference"
    description: "Different ways to specify project context in commands"
    content:
      methods:
        - method: "Local Configuration (.initiat file) (New!)"
          command: "initiat secret list"
          use_case: "When you have a .initiat file in your project directory"
          output: |
            # Commands automatically use local project context
            # No prompts needed when .initiat file exists
        - method: "Interactive Selection"
          command: "initiat secret list"
          use_case: "When you want to select from available projects interactively"
          output: |
            ‚ùì Project context is required for this command.
            üí° You can specify project using:
               --project-path org/project
               --org org --project project
               Create a .initiat file with org and project
               Or configure defaults with 'initiat config set org <org>' and 'initiat config set project <project>'
            
            Available projects:
              1. Production Environment (acme-corp/production)
              2. Staging Environment (acme-corp/staging)
              3. Development Environment (acme-corp/dev)
              0. Enter custom project
            
            Select project (0 for custom): 
        - method: "Full project path"
          command: "initiat secret list --project-path acme-corp/production"
          use_case: "When you need to specify the exact project"
        - method: "Separate org and project"
          command: "initiat secret list --org acme-corp --project production"
          use_case: "When you want to be explicit about organization and project"
        - method: "Project only (uses default org)"
          command: "initiat secret list --project production"
          use_case: "When using your default organization"
        - method: "Short flags"
          command: "initiat secret list -P acme-corp/production"
          use_case: "For faster typing with short flags"
        - method: "Mixed short flags"
          command: "initiat secret list --org acme-corp -p production"
          use_case: "Combining short flags for org and project"
      configuration_priority:
        title: "Configuration Priority"
        description: "Order of precedence for project context resolution"
        order:
          - "Command-line flags (highest priority)"
          - "Local .initiat file"
          - "Global configuration defaults"
          - "Environment variables (lowest priority)"
    metadata:
      order: 2

  error_handling:
    id: "error_handling"
    title: "Error Handling"
    type: "reference"
    description: "Common error scenarios and how to resolve them"
    content:
      error_types:
        authentication:
          - error: "Device not registered"
            message: "‚ùå Device not registered. Please run 'initiat device register <name>' first"
            solution: "Register your device with initiat device register <device-name>"
          - error: "Project key not initialized"
            message: "‚ùå Failed to get project key: project key not initialized"
            solution: "Initialize project keys with initiat project init <project-path>"
          - error: "Invalid registration token"
            message: "‚ùå Invalid or expired registration token"
            solution: "Clear token and re-authenticate with initiat device clear-token && initiat auth login"
        network:
          - error: "Network connection failed"
            message: "‚ùå Failed to set secret: network connection failed"
            solution: "Check your internet connection and try again"
          - error: "Secret not found"
            message: "‚ùå Failed to get secret: server returned 404"
            solution: "Verify the secret key exists with initiat secret list"
        validation:
          - error: "Invalid secret key"
            message: "‚ùå Invalid secret key: must contain only alphanumeric characters and underscores"
            solution: "Use a valid secret key name"
          - error: "Invalid secret value"
            message: "‚ùå Invalid secret value: cannot be empty"
            solution: "Provide a non-empty secret value"
        configuration:
          - error: "Permission denied"
            message: "‚ùå Failed to initialize config: permission denied"
            solution: "Check file permissions and try again"
          - error: "Invalid project path"
            message: "‚ùå Invalid project path: expected 'org-slug/project-slug'"
            solution: "Use the correct project path format"
    metadata:
      order: 3

  configuration_reference:
    id: "configuration_reference"
    title: "Configuration Reference"
    type: "reference"
    description: "Complete reference for all configuration options and settings"
    content:
      configuration_file:
        title: "Configuration File"
        description: "Location and format of the configuration file"
        details:
          - "File: ~/.initiat/config.yaml"
          - "Format: YAML"
          - "Permissions: 600 (owner read/write only)"
          - "Auto-created on first use"
      available_keys:
        title: "Available Configuration Keys"
        description: "All configuration keys that can be set"
        keys:
          - key: "api.url"
            description: "API base URL"
            default: "https://www.initiat.dev"
            example: 'initiat config set api.url "https://api.initiat.dev"'
          - key: "api.timeout"
            description: "API timeout duration"
            default: "30s"
            example: 'initiat config set api.timeout "60s"'
          - key: "org"
            description: "Default organization slug"
            default: ""
            example: 'initiat config set org "my-company"'
          - key: "project"
            description: "Default project slug"
            default: ""
            example: 'initiat config set project "production"'
          - key: "service"
            description: "Service name for keyring"
            default: "initiat-cli"
            example: 'initiat config set service "my-custom-service"'
      environment_variables:
        title: "Environment Variables"
        description: "Configuration via environment variables"
        variables:
          - name: "INITIAT_API_BASE_URL"
            description: "API base URL"
            example: "export INITIAT_API_BASE_URL=https://api.initiat.dev"
          - name: "INITIAT_API_TIMEOUT"
            description: "API timeout"
            example: "export INITIAT_API_TIMEOUT=60s"
          - name: "INITIAT_SERVICE_NAME"
            description: "Service name for keyring"
            example: "export INITIAT_SERVICE_NAME=my-custom-service"
          - name: "INITIAT_PROJECT_DEFAULT_ORG"
            description: "Default organization"
            example: "export INITIAT_PROJECT_DEFAULT_ORG=my-company"
          - name: "INITIAT_PROJECT_DEFAULT_PROJECT"
            description: "Default project"
            example: "export INITIAT_PROJECT_DEFAULT_PROJECT=production"
      configuration_precedence:
        title: "Configuration Precedence"
        description: "Order of configuration priority (highest to lowest)"
        order:
          - "Command-line flags"
          - "Environment variables"
          - "Configuration file"
          - "Default values"
      project_aliases:
        title: "Project Aliases"
        description: "Creating and managing project shortcuts"
        examples:
          - "Create alias: initiat config alias set prod acme-corp/production"
          - "Use alias: initiat secret list --project-path prod"
          - "List aliases: initiat config alias list"
          - "Remove alias: initiat config alias remove prod"
    metadata:
      order: 4

  best_practices:
    id: "best_practices"
    title: "Best Practices"
    type: "reference"
    description: "Recommended practices for using Initiat CLI effectively"
    content:
      project_organization:
        title: "Project Organization"
        description: "Best practices for organizing projects and secrets"
        tips:
          - "Use descriptive project names: acme-corp/production, acme-corp/staging"
          - "Initialize project keys before storing secrets"
          - "Use consistent naming conventions for secret keys"
          - "Group related secrets in the same project"
      secret_management:
        title: "Secret Management"
        description: "Best practices for managing secrets securely"
        tips:
          - "Use descriptive secret keys: API_KEY, DB_PASSWORD, JWT_SECRET"
          - "Add descriptions for complex secrets"
          - "Regularly rotate secrets and update versions"
          - "Never share secret values in plain text"
      device_management:
        title: "Device Management"
        description: "Best practices for managing device access"
        tips:
          - "Use descriptive device names: john-macbook, ci-server-prod"
          - "Register devices before team members need access"
          - "Approve device access promptly for team productivity"
          - "Regularly audit device access and remove unused devices"
      configuration_management:
        title: "Configuration Management"
        description: "Best practices for managing CLI configuration"
        tips:
          - "Set default organization and project for faster workflows"
          - "Use project aliases for frequently accessed projects"
          - "Configure API settings for your environment"
          - "Use environment variables for CI/CD pipelines"
          - "Regularly review and clean up unused aliases"
      security_considerations:
        title: "Security Considerations"
        description: "Important security practices to follow"
        tips:
          - "Never share device credentials or project keys"
          - "Use --force flag carefully with secret operations"
          - "Regularly audit device access and remove unused devices"
          - "Keep CLI updated to latest version for security patches"
          - "Use strong, unique device names for easy identification"
    metadata:
      order: 5
